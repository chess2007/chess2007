\ стековые манипуляторы, расширенные операторами (для быстрого прототипирования и отладки программных модулей)

: SPDROP ( p*n n --)  P+A DROP ;  \ убрать со стека n байтов
: SPMOVE ( p*n addr n --) $ 4 B=aP D=A D+@P L1: $ -4 Da C=@B @D=C $ 4 Ba $ 4 A-# L1 J0<> 2DROP ; \ скопировать n байтов стека в память

M: aDO   OVER + SWAP ?DO ;    \ макрос ( BOUND ?DO )
M: I+  ( n -- )  R@ + RP@ ! ; \ макрос: увеличить счетчик цикла на n со стека

: odin  1 ;
: hex   16 ;
: 4cell 32 ;
: kbyte 1024 ;
: mbyte 1048576 ;

: hAlloc  ALLOCATE THROW ;
: hFree       FREE THROW ;
: hResize   RESIZE THROW ;

I: LAMBDA{ ( -- res xt ) 0 BRANCH, >MARK HERE ;
I: }LAMBDA ( res xt -- ) RET, >R >RESOLVE1 R> LIT, ;

I: FO ` OF ` ` ;
M: EF ENDOF ;

M: SYM->OPERATOR
   '0' FO FALSE      EF  'G' FO aDO     EF  '*' FO *       EF
   'a' FO ABS        EF  'H' FO WITHIN  EF  '+' FO +       EF                      
   'b' FO C@         EF  'I' FO I       EF  ',' FO LITERAL EF                
   'c' FO EMIT       EF  'J' FO J       EF  '-' FO -       EF                      
   'd' FO DUP        EF  'K' FO EKEY    EF  '.' FO .       EF                      
   'e' FO ELSE       EF  'L' FO LOOP    EF  '/' FO /       EF                      
   'f' FO hFree      EF  'M' FO MAX     EF  ';' FO EXIT    EF                      
   'g' FO CELL       EF  'N' FO +LOOP   EF  '<' FO <       EF
   'h' FO hAlloc     EF  'O' FO BEGIN   EF  '=' FO =       EF
   'i' FO 1+         EF  'P' FO DEPTH   EF  '>' FO >       EF             
   'j' FO 1+!        EF  'Q' FO LEAVE   EF  '?' FO IF      EF
   'k' FO KEY        EF  'R' FO REPEAT  EF  '@' FO @       EF
   'l' FO LSHIFT     EF  'S' FO SPACES  EF  '[' FO CASE    EF
   'm' FO MIN        EF  'T' FO TYPE    EF  '\' FO CR      EF
   'n' FO NEGATE     EF  'U' FO UNTIL   EF  ']' FO ENDCASE EF
   'o' FO AGAIN      EF  'V' FO MOVE    EF  '^' FO XOR     EF
   'p' FO DS>F       EF  'W' FO WHILE   EF  '_' FO ACCEPT  EF
   'q' FO COMPARE    EF  'X' FO EXECUTE EF  '{' FO LAMBDA{ EF
   'r' FO RSHIFT     EF  'Y' FO TRUE    EF  '|' FO OR      EF
   's' FO SEARCH     EF  'Z' FO 0=      EF  '}' FO }LAMBDA EF
   't' FO THEN       EF  '!' FO !       EF  '~' FO INVERT  EF
   'u' FO hResize    EF  '#' FO FILL    EF                        
   'v' FO EVALUATE   EF  '$' FO ?DO     EF  
   'w' FO C!         EF  '%' FO MOD     EF  
   'x' FO DROP       EF  '&' FO AND     EF  
   'y' FO odin       EF  '(' FO OF      EF  
   'z' FO 0<>        EF  ')' FO ENDOF   EF                        
;
 
M: XTSYM ` LAMBDA{ I 1+ C@ CASE SYM->OPERATOR ENDCASE ` }LAMBDA 1 I+ ;

: DOR     ( d1 d2 -- d3)  D=@P $ 8 Pa $ -4 A|@P @P|D ;
: DXOR    ( d1 d2 -- d3)  D=@P $ 8 Pa $ -4 A^@P @P^D ;
: DAND    ( d1 d2 -- d3)  D=@P $ 8 Pa $ -4 A&@P @P&D ;
: DINVERT ( d1 -- d2 )    @P~ A~ ;
: DLSHIFT ( d n -- 'd ) $ 4 D=@P $ 20 C=# C-A D>> C=A @P<< $ 4 @P<< @P|D DROP ;
: DRSHIFT ( d n -- 'd ) D=@P $ 20 C=# C-A D<< C=A @P>> $ 4 @P>> $ 4 @P|D DROP ;
: D0<>    ( d -- f ) D0= INVERT ;
: 1-! ( addr --)   @A-- DROP ;
: Dodin 1. ;
: Dnull 0. ;
: n.0b ( n -- ) 2 BASE ! .0 DECIMAL ;
: n.0h ( n -- ) HEX .0 DECIMAL ;
: .BL ( n -- ) >R 0 <# #S #> R> OVER - 0 MAX DUP IF 0 DO BL EMIT LOOP ELSE DROP THEN TYPE ;
: sqrt ( n -- sqrt )  $ -4 @P=A $ -4 0=@P 0SQRT $ -4 @P=0- $ -4 A=@P ;

\ символы с префиксом " 
M: SYM->DOPERATOR 
'a' FO DABS     EF 'A' FO NOOP    EF '!' FO 2!       EF              
'b' FO W@       EF 'B' FO NOOP    EF '#' FO NOOP     EF              
'c' FO NOOP     EF 'C' FO NOOP    EF '$' FO NOOP     EF
'd' FO 2DUP     EF 'D' FO NOOP    EF '%' FO NOOP     EF
'e' FO NOOP     EF 'E' FO NOOP    EF '&' FO DAND     EF
'f' FO NOOP     EF 'F' FO NOOP    EF '(' FO NOOP     EF
'g' FO 4cell    EF 'G' FO NOOP    EF ')' FO NOOP     EF
'h' FO ALLOT    EF 'H' FO NOOP    EF '*' FO NOOP     EF
'i' FO NOOP     EF 'I' FO NOOP    EF '+' FO D+       EF
'j' FO NOOP     EF 'J' FO NOOP    EF ',' FO 2LITERAL EF
'k' FO NOOP     EF 'K' FO NOOP    EF '-' FO D-       EF
'l' FO DLSHIFT  EF 'L' FO NOOP    EF '.' FO D.       EF
'm' FO NOOP     EF 'M' FO NOOP    EF '/' FO NOOP     EF
'n' FO DNEGATE  EF 'N' FO NOOP    EF ';' FO NOOP     EF
'o' FO NOOP     EF 'O' FO NOOP    EF '<' FO D<       EF
'p' FO NOOP     EF 'P' FO NOOP    EF '=' FO D=       EF
'q' FO NOOP     EF 'Q' FO NOOP    EF '>' FO D>       EF             
'r' FO DRSHIFT  EF 'R' FO NOOP    EF '?' FO NOOP     EF
's' FO NOOP     EF 'S' FO NOOP    EF '@' FO 2@       EF                         
't' FO NOOP     EF 'T' FO NOOP    EF '[' FO NOOP     EF
'u' FO NOOP     EF 'U' FO NOOP    EF '\' FO NOOP     EF
'v' FO NOOP     EF 'V' FO NOOP    EF ']' FO NOOP     EF                         
'w' FO W!       EF 'W' FO NOOP    EF '^' FO DXOR     EF
'x' FO 2DROP    EF 'X' FO NOOP    EF '_' FO NOOP     EF
'y' FO Dodin    EF 'Y' FO NOOP    EF '{' FO NOOP     EF                         
'z' FO D0<>     EF 'Z' FO D0=     EF '|' FO DOR      EF
                                     '}' FO NOOP     EF
                                     '~' FO DINVERT  EF
                                     '0' FO Dnull    EF
;                                                        

\ символы с префиксом `
M: SYM->FOPERATOR
'a' FO FABS     EF 'A' FO NOOP   EF '!' FO F!    EF   
'b' FO .BL      EF 'B' FO NOOP   EF '#' FO NOOP  EF
'c' FO FCOS     EF 'C' FO NOOP   EF '$' FO NOOP  EF
'd' FO FDUP     EF 'D' FO NOOP   EF '%' FO NOOP  EF
'e' FO NOOP     EF 'E' FO NOOP   EF '&' FO NOOP  EF
'f' FO NOOP     EF 'F' FO NOOP   EF '(' FO NOOP  EF
'g' FO NOOP     EF 'G' FO NOOP   EF ')' FO NOOP  EF                     
'h' FO hex      EF 'H' FO NOOP   EF '*' FO F*    EF                     
'i' FO 1-       EF 'I' FO F1+    EF '+' FO F+    EF
'j' FO 1-!      EF 'J' FO NOOP   EF ',' FO NOOP  EF
'k' FO kbyte    EF 'K' FO mbyte  EF '-' FO F-    EF
'l' FO NOOP     EF 'L' FO NOOP   EF '.' FO F.    EF
'm' FO FMIN     EF 'M' FO FMAX   EF '/' FO F/    EF
'n' FO FNEGATE  EF 'N' FO NOOP   EF ';' FO RET,  EF
'o' FO NOOP     EF 'O' FO NOOP   EF '<' FO F<    EF
'p' FO FPI      EF 'P' FO .0     EF '=' FO F=    EF
'q' FO sqrt     EF 'Q' FO FSQRT  EF '>' FO NOOP  EF
'r' FO R>       EF 'R' FO >R     EF '?' FO NOOP  EF
's' FO FSIN     EF 'S' FO NOOP   EF '@' FO F@    EF           
't' FO n.0b     EF 'T' FO n.0h   EF '[' FO NOOP  EF
'u' FO NOOP     EF 'U' FO NOOP   EF '\' FO NOOP  EF                  
'v' FO NOOP     EF 'V' FO NOOP   EF ']' FO NOOP  EF
'w' FO NOOP     EF 'W' FO NOOP   EF '^' FO NOOP  EF
'x' FO FDROP    EF 'X' FO R@     EF '_' FO NOOP  EF
'y' FO NOOP     EF 'Y' FO NOOP   EF '{' FO NOOP  EF                  
'z' FO F0<      EF 'Z' FO F0=    EF '|' FO NOOP  EF
                                    '}' FO NOOP  EF        
                                    '~' FO NOOP  EF        
                                    '0' FO NOOP  EF        
;

0 VALUE XSP 0 VALUE XSF
: ; 0 TO XSP 0 TO XSF POSTPONE ; ; IMMEDIATE
: NOTFOUND ( a u -- ) u! a! 
  z19?( C@ '1' ':' WITHIN )
  zAF?( C@ 'A' 'G' WITHIN )
  a z19? a zAF? OR          fz1!
  a    C@ '/'        =      fr1!
  a 1+ C@ '/'        =      fr2!
  a    C@ '\'        =      fr3!  
  fz1 fr2 AND fr1 OR fr3 OR u 1 > AND 0= IF a u NOTFOUND EXIT THEN
  fr1 XSP 0= AND  fz1 fr2 AND OR
  IF  64 ALLOCATE THROW sp! sp TO XSP THEN
 \ IF HERE sp! 64 LIT, ` ALLOT  sp TO XSP THEN
  fz1 IF a C@ a z19? IF '0' ELSE '7' THEN - CELLS Lb! sp LIT, Lb LIT, ` SPMOVE  Lb LIT, ` SPDROP THEN
  a u + a fz1 IF 2+ ELSE 1+ THEN
  ?DO I z19? I zAF? OR
      IF I z19? 
         IF   I C@ '0' -  1- CELLS LIT, sp LIT, ` + ` @ 
         ELSE I C@ '7' -  1- CELLS LIT, sp LIT, ` + ` @ 
         THEN
      ELSE I C@ ':' =
           IF   I 1+ z19? 
                IF   I 1+ C@ '0' - 1- CELLS LIT,  sp LIT, ` + ` ! 
                ELSE I 1+ C@ '7' - 1- CELLS LIT,  sp LIT, ` + ` !
                THEN 1 I+
           ELSE I C@ ''' = I 1+ z19?  I 1+ zAF? OR AND
                IF I 1+ z19? 
                   IF   I 1+ C@ '0' - 1- CELLS LIT, sp LIT, ` +  
                   ELSE I 1+ C@ '7' - 1- CELLS LIT, sp LIT, ` +  
                   THEN 1 I+                
                ELSE I C@ '`' = I 1+ z19? I 1+ zAF? OR AND 
                     IF I 1+ z19? 
                        IF   I 1+ C@ '0' - LIT,  
                        ELSE I 1+ C@ '7' - LIT,  
                        THEN 1 I+
                     ELSE I C@ '`' = 
                          IF   I 1+ C@ CASE SYM->FOPERATOR ENDCASE 1 I+ 
                          ELSE I C@ '"' = 
                               IF   I 1+ C@ CASE SYM->DOPERATOR ENDCASE 1 I+
                               ELSE I    C@ CASE SYM->OPERATOR ''' OF XTSYM  ENDOF ENDCASE
                               THEN
                          THEN
                     THEN
                THEN                                                                               
           THEN   
      THEN        
  LOOP
;

\ работа с числами с плав. точкой - односимвольный вариант

M: S>FOPERATOR
  '0' FO FALSE      EF 'G' FO aDO      EF '*' FO F*       EF     
  'a' FO FABS       EF 'H' FO WITHIN   EF '+' FO F+       EF     
  'b' FO NOOP       EF 'I' FO I        EF ',' FO FLITERAL EF     
  'c' FO FCOS       EF 'J' FO J        EF '-' FO F-       EF     
  'd' FO FDUP       EF 'K' FO EKEY     EF '.' FO F.       EF     
  'e' FO ELSE       EF 'L' FO LOOP     EF '/' FO F/       EF     
  'f' FO hFree      EF 'M' FO FMAX     EF ';' FO EXIT     EF     
  'g' FO CELL       EF 'N' FO +LOOP    EF '<' FO F<       EF     
  'h' FO hAlloc     EF 'O' FO BEGIN    EF '=' FO F=       EF     
  'i' FO F1+        EF 'P' FO FDEPTH   EF '>' FO NOOP     EF     
  'j' FO 1+!        EF 'Q' FO LEAVE    EF '?' FO IF       EF     
  'k' FO KEY        EF 'R' FO REPEAT   EF '@' FO F@       EF     
  'l' FO NOOP       EF 'S' FO FSQRT    EF '[' FO CASE     EF     
  'm' FO FMIN       EF 'T' FO FTAN     EF '\' FO CR       EF     
  'n' FO FNEGATE    EF 'U' FO UNTIL    EF ']' FO ENDCASE  EF     
  'o' FO AGAIN      EF 'V' FO MOVE     EF '^' FO XOR      EF     
  'p' FO DATA>FLOAT EF 'W' FO WHILE    EF '_' FO ACCEPT   EF     
  'q' FO FLOAT>DATA EF 'X' FO EXECUTE  EF '{' FO LAMBDA{  EF     
  'r' FO DS>F       EF 'Y' FO TRUE     EF '|' FO OR       EF     
  's' FO FSIN       EF 'Z' FO F0=      EF '}' FO }LAMBDA  EF     
  't' FO THEN       EF '!' FO F!       EF '~' FO INVERT   EF     
  'u' FO hResize    EF '#' FO FILL     EF                     
  'v' FO EVALUATE   EF '$' FO ?DO      EF                     
  'w' FO NOOP       EF '%' FO MOD      EF                     
  'x' FO FDROP      EF '&' FO AND      EF                     
  'y' FO odin       EF '(' FO OF       EF                     
  'z' FO F0<        EF ')' FO ENDOF    EF                        
;

: NOTFOUND ( a u -- ) u! a! XSF sf!
  z18?( C@ '1' '9' WITHIN )
  z19?( C@ '1' ':' WITHIN )
  zAF?( C@ 'A' 'G' WITHIN )
  a z18?                    fz1!
  a    C@ '|'        =      fr1!
  a 1+ C@ '|'        =      fr2!
  fz1 fr2 AND fr1 OR u 1 > AND 0= IF a u NOTFOUND EXIT THEN
  fr1 XSF 0= AND  fz1 fr2 AND OR
  IF  128 ALLOCATE THROW is sf sf TO XSF THEN
  fz1 IF a C@ '0' - DUP 
         >R 0 DO `  FLOAT>DATA LOOP  
         R> 0 DO I 2* CELLS LIT, sf LIT, ` + ` 2! LOOP 
      THEN
  a u + a fz1 IF 2+ ELSE 1+ THEN
  ?DO I z19? I zAF? OR
      IF   I C@  I z19? IF '0' ELSE '7' THEN -  1- 2* CELLS LIT, sf LIT, ` + ` 2@ ` DATA>FLOAT  
      ELSE I C@ ':' =
           IF ` FLOAT>DATA  I 1+ C@ I 1+ z19? IF '0' ELSE '7' THEN - 1- 2* CELLS LIT,  sf LIT, ` + ` 2! 1 I+  
           ELSE I C@ '`' = I 1+ z19? I 1+ zAF? OR AND
                IF I 1+ C@ I 1+ z19? IF '0' ELSE '7' THEN - DS>F ` FLITERAL  1 I+                                                     
                ELSE I C@ ''' = I 1+ z19?  I 1+ zAF? OR AND                                  
                     IF   I 1+ C@ I 1+ z19? IF '0' ELSE '7' THEN - 1- CELLS LIT, sf LIT, ` + 1 I+                                                                           
                     ELSE I C@ CASE S>FOPERATOR ENDCASE
                     THEN
                THEN 
           THEN      
      THEN           
  LOOP               
;
\EOF 
\ как пример использования - манипуляторный вариант конвертора чисел с плавающей запятой из формы 32,123 в форму 32.123е
\ числа с плавающей запятой в виде 3,1415 
\             1 2       3   4   5   6   7   8    9  A  B  C 
: NOTFOUND  ( a u -- ) '0' ':' ',' '.' 'e' '-' ( sq sz pt an ) 
  8/0:90:A0:B0:C12GIb34H?'9jtIb5=?I1-:B'AjtL
  /1b8=?92`i`i=e92`i=tAy=&Z?12 NOTFOUND /;t
  /2iih:C1C2V7C2+w6CB+w0C2i+wC2iv
; 

\ Символы     Символы с префиксами " `         

a ABS         "a DABS         `a FABS        'S  - XT слова обозначенного символом S
b C@          "b W@           `b .BL         '1..'9 'A..'F - адреса ячеек буфера, куда сбрасываются со стека параметры    
c EMIT        "d 2DUP         `c FCOS                        и откуда они кладутся(копируются) на стек
d DUP         "g 4cell        `d FDUP        1..9 A..F - содержимое ячеек буфера
e ELSE        "l DLSHIFT      `f            `1..`9 `A..`F - значения 1..9 A..F
f hFree       "n DNEGATE      `h hex    
g CELL        "r DRSHIFT      `i 1-     
h hAlloc      "w W!           `j 1-!    
i 1+          "x 2DROP        `k kbyte  
j 1+!         "y Dodin        `K mbyte  
k KEY         "z D0<>         `m FMIN   
l LSHIFT      "D              `n FNEGATE
m MIN         "F              `p FPI    
n NEGATE      "X              `q sqrt                                  
o AGAIN       "Z D0=          `Q FSQRT  
p DP          "+ D+           `s FSIN   
q COMPARE     "- D-           `t n.0b   
r RSHIFT      "< D<           `T n.0h   
s SEARCH      "= D=           `x FDROP  
t THEN        "> D>           `z F0<    
u hResize     "@ 2@           `I F1+    
v EVALUATE    "! 2!           `P .0     
w C!          "^ DXOR         `M FMAX   
x DROP        "| DOR          `Z F0=    
y odin        "& DAND         `+ F+     
z 0<>         "~ DINVERT      `- F-     
G aDO         ", 2LITERAL     `* F*     
H WITHIN      ". D.           `/ F/     
I I           "0 Dnull        `< F<     
J J           "h ALLOT        `= F=     
K EKEY                        `@ F@     
L LOOP                        `! F!     
M MAX                         `. F.     
N +LOOP                       `; RET,   
O BEGIN                       `r R>   
P DEPTH                       `R >R
Q LEAVE                       `X R@
R REPEAT 
S SPACES 
T TYPE   
U UNTIL  
V MOVE   
W WHILE  
X EXECUTE
Y TRUE   
Z 0=     
! !      
# FILL   
$ ?DO    
% MOD    
& AND    
( OF     
) ENDOF  
* *      
+ +      
, LITERAL
- -      
. .      
/ /      
; EXIT   
< <      
= =      
> >      
? IF     
@ @      
[ CASE   
\ CR     
] ENDCASE
^ XOR    
_ ACCEPT 
{ LAMBDA{
| OR     
} }LAMBDA
~ INVERT 















